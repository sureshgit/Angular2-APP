; jQuery(document).ready(function () {
    var dN = "spinner-six", dS = 24, dC = "#333333", dHC = "#333333", dCCOH = false, dET = "hover", dA = true, dL = false, dOP = false, mD = 300, hD = 500, aC = "activeicon", aPC = "active", dAC = "#000000", lDI = JSON.stringify({ "spinner-six": { "d": 1000, "it": 1, "sh": [{ "i": { "a": { "p": "M16,14c-0.178,0-0.347,0.031-0.512,0.074l-3.023-3.023c-0.391-0.391-1.023-0.391-1.414,0c-0.393,0.391-0.393,1.023,0,1.414l3.023,3.024C14.031,15.653,14,15.822,14,16c0,1.104,0.896,2,2,2s2-0.896,2-2S17.104,14,16,14z", "s": "none", "fl": "#333" } }, "f": { "0": { "t": "" }, "100": { "t": "r-360,16,16" } }, "fIE": { "0": { "t": "r0,14.5,14.5" }, "100": { "t": "r-360,14.5,14.5" } } }, { "i": { "a": { "p": "M18.121,2.878c1.174,1.173,1.172,3.072,0,4.243c-1.171,1.172-3.069,1.174-4.241,0.001c-1.172-1.171-1.172-3.071,0-4.244C15.052,1.708,16.952,1.708,18.121,2.878zM3.578,11.277c0.428,1.6,2.075,2.551,3.672,2.122c1.604-0.43,2.551-2.075,2.122-3.674C8.944,8.123,7.301,7.172,5.699,7.603C4.097,8.03,3.148,9.675,3.578,11.277zM5.699,24.397c1.598,0.43,3.247-0.521,3.672-2.121c0.43-1.602-0.52-3.247-2.122-3.673c-1.602-0.43-3.245,0.516-3.672,2.118C3.146,22.323,4.097,23.968,5.699,24.397zM18.121,29.121c1.172-1.169,1.172-3.073,0-4.243c-1.173-1.172-3.071-1.172-4.241,0.002c-1.172,1.172-1.176,3.068-0.002,4.239C15.048,30.293,16.95,30.293,18.121,29.121zM28.423,20.724c-0.426-1.601-2.074-2.554-3.674-2.122c-1.602,0.432-2.551,2.075-2.119,3.675c0.43,1.602,2.07,2.553,3.668,2.121C27.899,23.972,28.853,22.323,28.423,20.724zM26.302,7.603c-1.598-0.432-3.248,0.52-3.674,2.122c-0.428,1.603,0.521,3.247,2.123,3.672c1.602,0.429,3.246-0.517,3.67-2.117C28.853,9.68,27.901,8.031,26.302,7.603z", "s": "none", "fl": "#333" } }, "f": { "0": { "t": "" }, "100": { "t": "r360" } }, "fIE": { "0": { "t": "r0,14.5,14.5" }, "100": { "t": "r360,14.5,14.5" } } }] } }), lDI = lDI.replace(/\"d\":/g, '"duration":').replace(/\"i\":/g, '"init":').replace(/\"f\":/g, '"frames":').replace(/\"fIE\":/g, '"framesIE":').replace(/\"o\":/g, '"opacity":').replace(/\"t\":/g, '"transform":').replace(/\"it\":/g, '"iteration":').replace(/\"sh\":/g, '"shapes":').replace(/\"a\":/g, '"attr":').replace(/\"p\":/g, '"path":').replace(/\"fl\":/g, '"fill":').replace(/\"e\":/g, '"easing":').replace(/\"s\":/g, '"stroke-width":0,"stroke":'), liviconsdata = JSON.parse(lDI), sB = Raphael.svg, vB = Raphael.vml;
    Raphael.fn.createLivicon = function (f, b, g, k, h, c, u, s, v, x, w, y, m) {
        var e = []; g = clone(w); var d = g.shapes.length; s = s ? s : g.iteration; var l = [], q = [], t = [], A = "s" + y + "," + y + ",0,0"; w = y = !1; if (b.match(/spinner/)) { y = !0; var D = jQuery("#" + f), B = function () { if (D.is(":visible")) { if (!z) { for (var a = 0; a < d; a++) e[a].animate(l[a].repeat(Infinity)); z = !0 } } else if (z) { for (a = 0; a < d; a++) e[a].stop(); z = !1 } } } b.match(/morph/) && (w = !0); for (b = 0; b < d; b++) { var r = g.shapes[b].init, n; for (n in r) r[n].transform = A + r[n].transform } if (sB) for (b = 0; b < d; b++) for (n in r =
        g.shapes[b].frames, r) "transform" in r[n] && (r[n].transform = A + r[n].transform); else for (b = 0; b < d; b++) for (n in r = g.shapes[b].framesIE ? g.shapes[b].framesIE : g.shapes[b].frames, r) "transform" in r[n] && (r[n].transform = A + r[n].transform); for (b = 0; b < d; b++) n = g.shapes[b].init.attr, "original" != k && (n.fill = k), t.push(n.fill), e[b] = this.path(n.path).attr(n); sB ? jQuery("#" + f + " > svg").attr("id", "canvas-for-" + f) : jQuery("#" + f).children(":first-child").attr("id", "canvas-for-" + f); f = jQuery("#" + f); m = m ? m : f; if (!0 == c) {
            if (w) {
                for (b =
                0; b < d; b++) l.push(Raphael.animation(g.shapes[b].frames, mD)), q.push(g.shapes[b].init.attr); if (h) { var C = clone(q); for (b = 0; b < d; b++) C[b].fill = h }
            } else if (c = v ? v : g.duration, !sB && vB) for (b = 0; b < d; b++) g.shapes[b].framesIE ? l.push(Raphael.animation(g.shapes[b].framesIE, c)) : l.push(Raphael.animation(g.shapes[b].frames, c)), q.push(g.shapes[b].init.attr); else for (b = 0; b < d; b++) l.push(Raphael.animation(g.shapes[b].frames, c)), q.push(g.shapes[b].init.attr); if ("click" == x) if (u && !w) if (y) {
                for (b = 0; b <
                d; b++) e[b].stop().animate(l[b].repeat(Infinity)); var z = !0; setInterval(B, 500)
            } else if (h) { m.hover(function () { for (var a = 0; a < d; a++) e[a].animate({ fill: h }, hD) }, function () { for (var a = 0; a < d; a++) e[a].animate({ fill: t[a] }, hD) }); var p = !0; m.click(function () { for (var a = 0; a < d; a++) e[a].stop().animate(p ? l[a].repeat(u) : q[a], 0); p = !p }) } else p = !0, m.click(function () { for (var a = 0; a < d; a++) e[a].stop().animate(p ? l[a].repeat(u) : q[a], 0); p = !p }); else w ? h ? (m.hover(function () {
                for (var a = 0; a < d; a++) e[a].animate({ fill: h },
                hD)
            }, function () { for (var a = 0; a < d; a++) e[a].animate({ fill: t[a] }, hD) }), p = !0, m.click(function () { for (var a = 0; a < d; a++) e[a].stop().animate(p ? l[a] : C[a], mD), p = !p })) : (p = !0, m.click(function () { for (var a = 0; a < d; a++) e[a].stop().animate(p ? l[a] : q[a], mD), p = !p })) : h ? (m.hover(function () { for (var a = 0; a < d; a++) e[a].animate({ fill: h }, hD) }, function () { for (var a = 0; a < d; a++) e[a].animate({ fill: t[a] }, hD) }), m.click(function () { for (var a = 0; a < d; a++) e[a].stop().animate(l[a].repeat(s)) })) :
            m.click(function () { for (var a = 0; a < d; a++) e[a].stop().animate(l[a].repeat(s)) }); else if (u && !w) if (y) { for (x = 0; x < d; x++) e[x].stop().animate(l[x].repeat(Infinity)); z = !0; setInterval(B, 500) } else h ? m.hover(function () { for (var a = 0; a < d; a++) e[a].stop().animate({ fill: h }, hD).animate(l[a].repeat(u)) }, function () { for (var a = 0; a < d; a++) e[a].stop().animate(q[a], 0) }) : m.hover(function () { for (var a = 0; a < d; a++) e[a].stop().animate(l[a].repeat(u)) }, function () { for (var a = 0; a < d; a++) e[a].stop().animate(q[a], 0) }); else w ? m.hover(function () {
                if (h) for (var a =
                0; a < d; a++) e[a].stop().animate({ fill: h }, hD).animate(l[a]); else for (a = 0; a < d; a++) e[a].stop().animate(l[a])
            }, function () { for (var a = 0; a < d; a++) e[a].stop().animate(q[a], mD) }) : m.hover(function () { if (h) for (var a = 0; a < d; a++) e[a].stop().animate(q[a], 0).animate({ fill: h }, hD).animate(l[a].repeat(s)); else for (a = 0; a < d; a++) e[a].stop().animate(q[a], 0).animate(l[a].repeat(s)) }, function () { for (var a = 0; a < d; a++) e[a].animate({ fill: t[a] }, hD) })
        } else h && m.hover(function () {
            for (var a =
            0; a < d; a++) e[a].stop().animate({ fill: h }, hD)
        }, function () { for (var a = 0; a < d; a++) e[a].stop().animate({ fill: t[a] }, hD) }); return !0
    };
    (function (f) {
        function b() { return b.counter++ } b.counter = 1; f.fn.extend({
            addLivicon: function (g) {
                return this.each(function () {
                    var k = f(this); if (!k.attr("id")) { var h = b(); k.attr("id", "livicon-" + h) } var c = k.data(); c.liviconRendered && k.removeLivicon(); c = fullNames(c); g && (g = fullNames(g)); var c = f.extend(c, g), h = k.attr("id"), u = k.parent(), s = c.name ? c.name : dN, v = c.size ? c.size : dS, x = c.eventtype ? c.eventtype : dET, w = v / 32; k[0].style.height ? k.css("width", v) : k.css({ width: v, height: v }); var y = s in liviconsdata ?
                    liviconsdata[s] : liviconsdata[dN], m = k.hasClass(aC) || u.hasClass(aPC) ? dAC : "original" == c.color ? "original" : c.color ? c.color : dC, e = dA ? !1 == c.animate ? c.animate : dA : !0 == c.animate ? c.animate : dA, d = dL ? !1 == c.loop ? !1 : Infinity : !0 == c.loop ? Infinity : !1, l = c.iteration ? 0 < Math.round(c.iteration) ? Math.round(c.iteration) : !1 : !1, q = c.duration ? 0 < Math.round(c.duration) ? Math.round(c.duration) : !1 : !1, t = dCCOH ? dHC : !1; !1 === c.hovercolor ||
                    0 === c.hovercolor ? t = !1 : !0 === c.hovercolor || 1 === c.hovercolor ? t = dHC : c.hovercolor && (t = c.hovercolor); c = dOP ? !1 == c.onparent ? !1 : u : !0 == c.onparent ? u : !1; Raphael(h, v, v).createLivicon(h, s, v, m, t, e, d, l, q, x, y, w, c); k.data("liviconRendered", !0); return this
                })
            }, removeLivicon: function (b) { return this.each(function () { var k = f(this); k.data("liviconRendered", !1); if ("total" === b) k.remove(); else { var h = k.attr("id"); f("#canvas-for-" + h).remove(); return k } }) }, updateLivicon: function (b) {
                return this.each(function () {
                    var k =
                    f(this); k.removeLivicon().addLivicon(b); return k
                })
            }
        }); f(".livicon").updateLivicon()
    })(jQuery); function fullNames(f) { f = JSON.stringify(f); f = f.replace(/\"n\":/g, '"name":').replace(/\"s\":/g, '"size":').replace(/\"c\":/g, '"color":').replace(/\"hc\":/g, '"hovercolor":').replace(/\"a\":/g, '"animate":').replace(/\"i\":/g, '"iteration":').replace(/\"d\":/g, '"duration":').replace(/\"l\":/g, '"loop":').replace(/\"et\":/g, '"eventtype":').replace(/\"op\":/g, '"onparent":'); return f = JSON.parse(f) }
    function clone(f) { if (null == f || "object" != typeof f) return f; var b = new f.constructor, g; for (g in f) b[g] = clone(f[g]); return b };
});